C51 COMPILER V9.56.0.0   HW_SERIAL                                                         03/24/2019 22:57:38 PAGE 1   


C51 COMPILER V9.56.0.0, COMPILATION OF MODULE HW_SERIAL
OBJECT MODULE PLACED IN .\list\hw_serial.obj
COMPILER INVOKED BY: E:\keil_c51\C51\BIN\C51.EXE driver\51\hw_serial.c LARGE OPTIMIZE(9,SPEED) BROWSE DEBUG OBJECTEXTEND
                    - PRINT(.\list\hw_serial.lst) TABS(2) OBJECT(.\list\hw_serial.obj)

line level    source

   1          
   2          /*------------------------------------------------------------------*/
   3          /* --- STC MCU International Limited -------------------------------*/
   4          /* --- STC 1T Series MCU RC Demo -----------------------------------*/
   5          /* --- Mobile: (86)13922805190 -------------------------------------*/
   6          /* --- Fax: 86-0513-55012956,55012947,55012969 ---------------------*/
   7          /* --- Tel: 86-0513-55012928,55012929,55012966 ---------------------*/
   8          /* --- Web: www.GXWMCU.com -----------------------------------------*/
   9          /* --- QQ:  800003751 ----------------------------------------------*/
  10          /* If you want to use the program or the program referenced in the  */
  11          /* article, please specify in which data and procedures from STC    */
  12          /*------------------------------------------------------------------*/
  13          
  14          /*************  功能说明  **************
  15          
  16          本文件为STC8xxx系列的端口初始化程序,用户几乎可以不修改这个程序.
  17          
  18          
  19          ******************************************/
  20          
  21          #include "hw_serial.h"
  22          #include "hw_pwm.h"
  23          #include "core/51/delay.h"
  24          
  25          
  26          
  27          COMx_Define COM1,COM2;
  28          u8  idata TX1_Buffer[COM_TX1_Lenth];  //发送缓冲
  29          u8  idata RX1_Buffer[COM_RX1_Lenth];  //接收缓冲
  30          u8 xdata TX2_Buffer[COM_TX2_Lenth]; //发送缓冲
  31          u8 xdata RX2_Buffer[COM_RX2_Lenth]; //接收缓冲
  32          
  33          u8  TX2_read,RX2_write; //读写索引(指针).
  34          bit B_TX2_Busy; // 发送忙标志
  35          
  36          u8 USART_Configuration(UART_ID UARTx, COMx_InitDefine *COMx)
  37          {
  38   1        u8  i;
  39   1        u32 j;
  40   1        
  41   1        if(UARTx == USART1)
  42   1        {
  43   2          COM1.id = 1;
  44   2          COM1.TX_read    = 0;
  45   2          COM1.TX_write   = 0;
  46   2          COM1.B_TX_busy  = 0;
  47   2          COM1.RX_Cnt     = 0;
  48   2          COM1.RX_TimeOut = 0;
  49   2          COM1.B_RX_OK    = 0;
  50   2          for(i=0; i<COM_TX1_Lenth; i++)  TX1_Buffer[i] = 0;
  51   2          for(i=0; i<COM_RX1_Lenth; i++)  RX1_Buffer[i] = 0;
  52   2      
  53   2          if(COMx->UART_Mode > UART_9bit_BRTx)  return 1; //模式错误
  54   2          if(COMx->UART_Polity == PolityHigh)   PS = 1; //高优先级中断
C51 COMPILER V9.56.0.0   HW_SERIAL                                                         03/24/2019 22:57:38 PAGE 2   

  55   2          else                  PS = 0; //低优先级中断
  56   2          SCON = (SCON & 0x3f) | COMx->UART_Mode;
  57   2          if((COMx->UART_Mode == UART_9bit_BRTx) ||(COMx->UART_Mode == UART_8bit_BRTx)) //可变波特率
  58   2          {
  59   3            j = (MAIN_Fosc / 4) / COMx->UART_BaudRate;  //按1T计算
  60   3            if(j >= 65536UL)  return 2; //错误
  61   3            j = 65536UL - j;
  62   3            if(COMx->UART_BRT_Use == BRT_Timer1)
  63   3            {
  64   4              TR1 = 0;
  65   4              AUXR &= ~0x01;    //S1 BRT Use Timer1;
  66   4              TMOD &= ~(1<<6);  //Timer1 set As Timer
  67   4              TMOD &= ~0x30;    //Timer1_16bitAutoReload;
  68   4              AUXR |=  (1<<6);  //Timer1 set as 1T mode
  69   4              TH1 = (u8)(j>>8);
  70   4              TL1 = (u8)j;
  71   4              ET1 = 0;  //禁止中断
  72   4              TMOD &= ~0x40;  //定时
  73   4              INT_CLKO &= ~0x02;  //不输出时钟
  74   4              TR1  = 1;
  75   4            }
  76   3            else if(COMx->UART_BRT_Use == BRT_Timer2)
  77   3            {
  78   4              AUXR &= ~(1<<4);  //Timer stop
  79   4              AUXR |= 0x01;   //S1 BRT Use Timer2;
  80   4              AUXR &= ~(1<<3);  //Timer2 set As Timer
  81   4              AUXR |=  (1<<2);  //Timer2 set as 1T mode
  82   4              TH2 = (u8)(j>>8);
  83   4              TL2 = (u8)j;
  84   4              IE2  &= ~(1<<2);  //禁止中断
  85   4              AUXR &= ~(1<<3);  //定时
  86   4              AUXR |=  (1<<4);  //Timer run enable
  87   4            }
  88   3            else return 2;  //错误
  89   3          }
  90   2          else if(COMx->UART_Mode == UART_ShiftRight)
  91   2          {
  92   3            if(COMx->BaudRateDouble == ENABLE)  AUXR |=  (1<<5);  //固定波特率SysClk/2
  93   3            else                AUXR &= ~(1<<5);  //固定波特率SysClk/12
  94   3          }
  95   2          else if(COMx->UART_Mode == UART_9bit) //固定波特率SysClk*2^SMOD/64
  96   2          {
  97   3            if(COMx->BaudRateDouble == ENABLE)  PCON |=  (1<<7);  //固定波特率SysClk/32
  98   3            else                PCON &= ~(1<<7);  //固定波特率SysClk/64
  99   3          }
 100   2          if(COMx->UART_Interrupt == ENABLE)  ES = 1; //允许中断
 101   2          else                ES = 0; //禁止中断
 102   2          if(COMx->UART_RxEnable == ENABLE) REN = 1;  //允许接收
 103   2          else                REN = 0;  //禁止接收
 104   2          P_SW1 = (P_SW1 & 0x3f) | (COMx->UART_P_SW & 0xc0);  //切换IO
 105   2          if(COMx->UART_RXD_TXD_Short == ENABLE)  PCON2 |=  (1<<4); //内部短路RXD与TXD, 做中继, ENABLE,DISABLE
 106   2          else                  PCON2 &= ~(1<<4);
 107   2          return  0;
 108   2        }else if(UARTx == USART2){
 109   2        
 110   2          COM2.id = 2;
 111   2          COM2.TX_read    = 0;
 112   2          COM2.TX_write   = 0;
 113   2          COM2.B_TX_busy  = 0;
 114   2          COM2.RX_Cnt     = 0;
 115   2          COM2.RX_TimeOut = 0;
 116   2          COM2.B_RX_OK    = 0;
C51 COMPILER V9.56.0.0   HW_SERIAL                                                         03/24/2019 22:57:38 PAGE 3   

 117   2          for(i=0; i<COM_TX2_Lenth; i++)  TX2_Buffer[i] = 0;
 118   2          for(i=0; i<COM_RX2_Lenth; i++)  RX2_Buffer[i] = 0;
 119   2      
 120   2          if(COMx->UART_Mode > UART_9bit_BRTx)  return 1; //模式错误
 121   2          if(COMx->UART_Polity == PolityHigh)   PS = 1; //高优先级中断
 122   2          else                  PS = 0; //低优先级中断
 123   2          S2CON = (S2CON & 0x3f) | COMx->UART_Mode;
 124   2          if((COMx->UART_Mode == UART_9bit_BRTx) ||(COMx->UART_Mode == UART_8bit_BRTx)) //可变波特率
 125   2          {
 126   3            j = (MAIN_Fosc / 4) / COMx->UART_BaudRate;  //按1T计算
 127   3            if(j >= 65536UL)  return 2; //错误
 128   3            j = 65536UL - j;
 129   3            if(COMx->UART_BRT_Use == BRT_Timer1)
 130   3            {
 131   4              TR1 = 0;
 132   4              AUXR &= ~0x01;    //S1 BRT Use Timer1;
 133   4              TMOD &= ~(1<<6);  //Timer1 set As Timer
 134   4              TMOD &= ~0x30;    //Timer1_16bitAutoReload;
 135   4              AUXR |=  (1<<6);  //Timer1 set as 1T mode
 136   4              TH1 = (u8)(j>>8);
 137   4              TL1 = (u8)j;
 138   4              ET1 = 0;  //禁止中断
 139   4              TMOD &= ~0x40;  //定时
 140   4              INT_CLKO &= ~0x02;  //不输出时钟
 141   4              TR1  = 1;
 142   4            }
 143   3            else if(COMx->UART_BRT_Use == BRT_Timer2)
 144   3            {
 145   4              AUXR &= ~(1<<4);  //Timer stop
 146   4              AUXR |= 0x01;   //S1 BRT Use Timer2;
 147   4              AUXR &= ~(1<<3);  //Timer2 set As Timer
 148   4              AUXR |=  (1<<2);  //Timer2 set as 1T mode
 149   4              TH2 = (u8)(j>>8);
 150   4              TL2 = (u8)j;
 151   4              IE2  &= ~(1<<2);  //禁止中断
 152   4              AUXR &= ~(1<<3);  //定时
 153   4              AUXR |=  (1<<4);  //Timer run enable
 154   4            }
 155   3            else return 2;  //错误
 156   3          }
 157   2          else if(COMx->UART_Mode == UART_ShiftRight)
 158   2          {
 159   3            if(COMx->BaudRateDouble == ENABLE)  AUXR |=  (1<<5);  //固定波特率SysClk/2
 160   3            else                AUXR &= ~(1<<5);  //固定波特率SysClk/12
 161   3          }
 162   2          else if(COMx->UART_Mode == UART_9bit) //固定波特率SysClk*2^SMOD/64
 163   2          {
 164   3            if(COMx->BaudRateDouble == ENABLE)  PCON |=  (1<<7);  //固定波特率SysClk/32
 165   3            else                PCON &= ~(1<<7);  //固定波特率SysClk/64
 166   3          }
 167   2          if(COMx->UART_Interrupt == ENABLE)  ES = 1; //允许中断
 168   2          else                ES = 0; //禁止中断
 169   2          if(COMx->UART_RxEnable == ENABLE) REN = 1;  //允许接收
 170   2          else                REN = 0;  //禁止接收
 171   2          P_SW2 = (P_SW2 & 0x3f) | (COMx->UART_P_SW & 0xc0);  //切换IO
 172   2          if(COMx->UART_RXD_TXD_Short == ENABLE)  PCON2 |=  (1<<4); //内部短路RXD与TXD, 做中继, ENABLE,DISABLE
 173   2          else                  PCON2 &= ~(1<<4);
 174   2          return  0;
 175   2        
 176   2        }
 177   1        return 3; //其它错误
 178   1      }
C51 COMPILER V9.56.0.0   HW_SERIAL                                                         03/24/2019 22:57:38 PAGE 4   

 179          
 180          
 181          /*************** 装载串口发送缓冲 *******************************/
 182          
 183          void TX1_write2buff(u8 dat) //写入发送缓冲，指针+1
 184          {
 185   1        TX1_Buffer[COM1.TX_write] = dat;  //装发送缓冲
 186   1        if(++COM1.TX_write >= COM_TX1_Lenth)  COM1.TX_write = 0;
 187   1      
 188   1        if(COM1.B_TX_busy == 0)   //空闲
 189   1        {  
 190   2          COM1.B_TX_busy = 1;   //标志忙
 191   2          TI = 1;         //触发发送中断
 192   2        }
 193   1      }
 194          
 195          #if 0
              static void TX2_write2buff(u8 dat)  //写入发送缓冲，指针+1
              {
                TX2_Buffer[COM2.TX_write] = dat;  //装发送缓冲
                if(++COM2.TX_write >= COM_TX2_Lenth)  COM2.TX_write = 0;
              
                if(COM2.B_TX_busy == 0)   //空闲
                {  
                  COM2.B_TX_busy = 1;   //标志忙
                  TI = 1;         //触发发送中断
                }
              }
              #endif
 208          
 209          
 210          void PrintString1(u8 *puts)
 211          {
 212   1          for (; *puts != 0;  puts++)  TX1_write2buff(*puts);   //遇到停止符0结束
 213   1      }
 214          
 215          
 216          //========================================================================
 217          // 函数: SetTimer2Baudraye(u16 dat)
 218          // 描述: 设置Timer2做波特率发生器。
 219          // 参数: dat: Timer2的重装值.
 220          // 返回: none.
 221          // 版本: VER1.0
 222          // 日期: 2018-4-2
 223          // 备注: 
 224          //========================================================================
 225          void  SetTimer2Baudraye(u16 dat)  // 选择波特率, 2: 使用Timer2做波特率, 其它值: 使用Timer1做波特率.
 226          {
 227   1        AUXR &= ~(1<<4);  //Timer stop
 228   1        AUXR &= ~(1<<3);  //Timer2 set As Timer
 229   1        AUXR |=  (1<<2);  //Timer2 set as 1T mode
 230   1        TH2 = (u8)(dat >> 8);
 231   1        TL2 = (u8)dat;
 232   1        IE2  &= ~(1<<2);  //禁止中断
 233   1        AUXR |=  (1<<4);  //Timer run enable
 234   1      }
 235          
 236          void  UART2_config(u32 brt, u8 timer, u8 io)  // brt: 通信波特率,  timer=2: 波特率使用定时器2, 其它值: 使用T
             -imer2做波特率. io=0: 串口2切换到P1.0 P1.1,  =1: 切换到P4.6 P4.7.
 237          {
 238   1        brt = 65536UL - (MAIN_Fosc / 4) / brt;
 239   1        if(timer == 2)  SetTimer2Baudraye((u16)brt);  //波特率使用定时器2
C51 COMPILER V9.56.0.0   HW_SERIAL                                                         03/24/2019 22:57:38 PAGE 5   

 240   1        else      SetTimer2Baudraye((u16)brt);  //波特率使用定时器2   两个条件都使用Timer2, 是为了跟另外串口函数兼容
 241   1      
 242   1        S2CON &= ~(1<<7); // 8位数据, 1位起始位, 1位停止位, 无校验
 243   1        IE2   |= 1;     //允许中断
 244   1        S2CON |= (1<<4);  //允许接收
 245   1        if(io == 1) { P_SW2 |= 1;   P4n_push_pull(0x80);} //切换到 P4.6 P4.7
 246   1        else    { P_SW2 &= ~1;  P1n_push_pull(0x02);} //切换到 P1.0 P1.1
 247   1        
 248   1        RX2_write   = 0;
 249   1      }
 250          
 251          void PrintString2(u8 *puts)
 252          {
 253   1          for (; *puts != 0;  puts++)
 254   1        {
 255   2          B_TX2_Busy = 1;   //标志发送忙
 256   2          S2BUF = *puts;    //发一个字节
 257   2          while(B_TX2_Busy);  //等待发送完成
 258   2        }
 259   1      }
 260          
 261          
 262          char putchar (char c)   
 263          {        
 264   1          TX1_write2buff(c);    
 265   1          return c;
 266   1      }
 267          
 268          
 269          /********************* UART1中断函数************************/
 270          void UART1_int (void) interrupt UART1_VECTOR
 271          {
 272   1        if(RI)
 273   1        {
 274   2          RI = 0;
 275   2          if(COM1.B_RX_OK == 0)
 276   2          {
 277   3            if(COM1.RX_Cnt >= COM_RX1_Lenth)  COM1.RX_Cnt = 0;
 278   3            RX1_Buffer[COM1.RX_Cnt++] = SBUF;
 279   3            COM1.RX_TimeOut = TimeOutSet1;
 280   3          }
 281   2        }
 282   1      
 283   1        if(TI)
 284   1        {
 285   2          TI = 0;
 286   2          if(COM1.TX_read != COM1.TX_write)
 287   2          {
 288   3            SBUF = TX1_Buffer[COM1.TX_read];
 289   3            if(++COM1.TX_read >= COM_TX1_Lenth)   COM1.TX_read = 0;
 290   3          }
 291   2          else  COM1.B_TX_busy = 0;
 292   2        }
 293   1      }
 294          
 295          //========================================================================
 296          // 函数: void UART2_int (void) interrupt UART2_VECTOR
 297          // 描述: 串口2中断函数
 298          // 参数: none.
 299          // 返回: none.
 300          // 版本: VER1.0
 301          // 日期: 2018-4-2
C51 COMPILER V9.56.0.0   HW_SERIAL                                                         03/24/2019 22:57:38 PAGE 6   

 302          // 备注: 
 303          //========================================================================
 304          void UART2_int (void) interrupt UART2_VECTOR
 305          {
 306   1        if(RI2)
 307   1        {
 308   2          CLR_RI2();
 309   2          RX2_Buffer[RX2_write] = S2BUF;
 310   2          if(++RX2_write >= RX2_Length) RX2_write = 0;
 311   2        }
 312   1      
 313   1        if(TI2)
 314   1        {
 315   2          CLR_TI2();
 316   2          B_TX2_Busy = 0;
 317   2        }
 318   1      
 319   1      }
 320          
 321          
 322          
 323          void  HW_serialConfig(UART_ID UARTx, u32 UART_BaudRate)
 324          {
 325   1        COMx_InitDefine   COMx_InitStructure;         //结构定义
 326   1        COMx_InitStructure.UART_Mode      = UART_8bit_BRTx;   //模式,       UART_ShiftRight,UART_8bit_BRTx,UART_9b
             -it,UART_9bit_BRTx
 327   1        COMx_InitStructure.UART_BRT_Use   = BRT_Timer2;     //使用波特率,   BRT_Timer1, BRT_Timer2 (注意: 串口2固定
             -使用BRT_Timer2)
 328   1        COMx_InitStructure.UART_BaudRate  = UART_BaudRate;      //波特率, 一般 110 ~ 115200
 329   1        COMx_InitStructure.UART_RxEnable  = ENABLE;       //接收允许,   ENABLE或DISABLE
 330   1        COMx_InitStructure.BaudRateDouble = DISABLE;      //波特率加倍, ENABLE或DISABLE
 331   1        COMx_InitStructure.UART_Interrupt = ENABLE;       //中断允许,   ENABLE或DISABLE
 332   1        COMx_InitStructure.UART_Polity    = PolityLow;      //中断优先级, PolityLow,PolityHigh
 333   1        
 334   1        if(USART1 == UARTx){
 335   2        
 336   2          COMx_InitStructure.UART_P_SW      = UART1_SW_P30_P31; //切换端口,   UART1_SW_P30_P31,UART1_SW_P36_P37,UA
             -RT1_SW_P16_P17(必须使用内部时钟)
 337   2        }else{
 338   2        
 339   2          COMx_InitStructure.UART_P_SW      = UART2_SW_P10_P11; //切换端口,   UART2_SW_P10_P11,UART2_SW_P46_P47
 340   2        }
 341   1        
 342   1        COMx_InitStructure.UART_RXD_TXD_Short = DISABLE;    //内部短路RXD与TXD, 做中继, ENABLE,DISABLE
 343   1        USART_Configuration(UARTx, &COMx_InitStructure);    //初始化串口1 USART1,USART2
 344   1      
 345   1        //PrintString1("STC15F2K60S2 UART Test Prgramme ---- dbug2!\r\n");  //SUART1发送一个字符串
 346   1      }
 347          
 348          uint32 HW_serialRead(UART_ID UARTx, uint8 *wdata, uint32 wsize, uint32 timeout)
 349          {
 350   1        uint32 readx = 0;
 351   1        uint32 i = 0;
 352   1        if(COM1.RX_TimeOut > 0)   //超时计数
 353   1        {
 354   2          if(--COM1.RX_TimeOut == 0)
 355   2          {
 356   3            if(COM1.RX_Cnt > 0)
 357   3            {
 358   4              for(i=0; i<COM1.RX_Cnt; i++)  TX1_write2buff(RX1_Buffer[i]);  //收到的数据原样返回
 359   4            }
 360   3            COM1.RX_Cnt = 0;
C51 COMPILER V9.56.0.0   HW_SERIAL                                                         03/24/2019 22:57:38 PAGE 7   

 361   3          }
 362   2        }
 363   1          #if 0
                
                
                while (timeout--)
                {
                  delay_ms(1);
                  if(USART1 == UARTx){
                    
                    if(COM1.RX_TimeOut > 0)   //超时计数
                    {
                      if(--COM1.RX_TimeOut == 0)
                      {
                        if(COM1.RX_Cnt > 0)
                        {
                          for(i=0; i<COM1.RX_Cnt; i++){
                            
                            //TX1_write2buff(RX1_Buffer[readx++]);  //收到的数据
                            wdata[i] = RX1_Buffer[readx++];
                            if(readx >= wsize){
                            
                              COM1.RX_Cnt = COM1.RX_Cnt - i;
                              return readx;
                            }
                          }
                        }
                        COM1.RX_Cnt = 0;
                      }
                    }
                  }
                  else{
                  
                    //TX2_write2buff(wdata[i]);
                  }
                }
                #endif
 398   1        
 399   1        
 400   1        return 0;
 401   1      
 402   1      }
*** WARNING C280 IN LINE 348 OF driver\51\hw_serial.c: 'UARTx': unreferenced local variable
*** WARNING C280 IN LINE 348 OF driver\51\hw_serial.c: 'wdata': unreferenced local variable
*** WARNING C280 IN LINE 348 OF driver\51\hw_serial.c: 'wsize': unreferenced local variable
*** WARNING C280 IN LINE 348 OF driver\51\hw_serial.c: 'timeout': unreferenced local variable
 403          
 404          uint32 HW_serialWrite(UART_ID UARTx, uint8 *wdata, uint32 wsize)
 405          {
 406   1        uint32 i = 0;
 407   1        
 408   1        for(i=0; i<wsize; i++){
 409   2        
 410   2          if(USART1 == UARTx){
 411   3          
 412   3            TX1_write2buff(wdata[i]);
 413   3          }
 414   2          else{
 415   3          
 416   3            //TX2_write2buff(wdata[i]);
 417   3          }
 418   2          
C51 COMPILER V9.56.0.0   HW_SERIAL                                                         03/24/2019 22:57:38 PAGE 8   

 419   2        }
 420   1        
 421   1        return i;
 422   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1386    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =    272      49
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =     80    ----
   BIT SIZE         =      1    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  4 WARNING(S),  0 ERROR(S)
