C51 COMPILER V9.56.0.0   HW_SERIAL                                                         03/17/2019 14:30:51 PAGE 1   


C51 COMPILER V9.56.0.0, COMPILATION OF MODULE HW_SERIAL
OBJECT MODULE PLACED IN .\list\hw_serial.obj
COMPILER INVOKED BY: E:\keil_c51\C51\BIN\C51.EXE driver\51\hw_serial.c LARGE OPTIMIZE(9,SPEED) BROWSE DEBUG OBJECTEXTEND
                    - PRINT(.\list\hw_serial.lst) TABS(2) OBJECT(.\list\hw_serial.obj)

line level    source

   1          
   2          /*------------------------------------------------------------------*/
   3          /* --- STC MCU International Limited -------------------------------*/
   4          /* --- STC 1T Series MCU RC Demo -----------------------------------*/
   5          /* --- Mobile: (86)13922805190 -------------------------------------*/
   6          /* --- Fax: 86-0513-55012956,55012947,55012969 ---------------------*/
   7          /* --- Tel: 86-0513-55012928,55012929,55012966 ---------------------*/
   8          /* --- Web: www.GXWMCU.com -----------------------------------------*/
   9          /* --- QQ:  800003751 ----------------------------------------------*/
  10          /* If you want to use the program or the program referenced in the  */
  11          /* article, please specify in which data and procedures from STC    */
  12          /*------------------------------------------------------------------*/
  13          
  14          /*************  功能说明  **************
  15          
  16          本文件为STC8xxx系列的端口初始化程序,用户几乎可以不修改这个程序.
  17          
  18          
  19          ******************************************/
  20          
  21          #include "hw_serial.h"
  22          #include "hw_pwm.h"
  23          #include "core/51/delay.h"
  24          
  25          
  26          
  27          COMx_Define COM1,COM2;
  28          u8  idata TX1_Buffer[COM_TX1_Lenth];  //发送缓冲
  29          u8  idata RX1_Buffer[COM_RX1_Lenth];  //接收缓冲
  30          //u8 xdata TX2_Buffer[COM_TX2_Lenth]; //发送缓冲
  31          //u8 xdata RX2_Buffer[COM_RX2_Lenth]; //接收缓冲
  32          
  33          u8 USART_Configuration(UART_ID UARTx, COMx_InitDefine *COMx)
  34          {
  35   1        u8  i;
  36   1        u32 j;
  37   1        
  38   1        if(UARTx == USART1)
  39   1        {
  40   2          COM1.id = 1;
  41   2          COM1.TX_read    = 0;
  42   2          COM1.TX_write   = 0;
  43   2          COM1.B_TX_busy  = 0;
  44   2          COM1.RX_Cnt     = 0;
  45   2          COM1.RX_TimeOut = 0;
  46   2          COM1.B_RX_OK    = 0;
  47   2          for(i=0; i<COM_TX1_Lenth; i++)  TX1_Buffer[i] = 0;
  48   2          for(i=0; i<COM_RX1_Lenth; i++)  RX1_Buffer[i] = 0;
  49   2      
  50   2          if(COMx->UART_Mode > UART_9bit_BRTx)  return 1; //模式错误
  51   2          if(COMx->UART_Polity == PolityHigh)   PS = 1; //高优先级中断
  52   2          else                  PS = 0; //低优先级中断
  53   2          SCON = (SCON & 0x3f) | COMx->UART_Mode;
  54   2          if((COMx->UART_Mode == UART_9bit_BRTx) ||(COMx->UART_Mode == UART_8bit_BRTx)) //可变波特率
C51 COMPILER V9.56.0.0   HW_SERIAL                                                         03/17/2019 14:30:51 PAGE 2   

  55   2          {
  56   3            j = (MAIN_Fosc / 4) / COMx->UART_BaudRate;  //按1T计算
  57   3            if(j >= 65536UL)  return 2; //错误
  58   3            j = 65536UL - j;
  59   3            if(COMx->UART_BRT_Use == BRT_Timer1)
  60   3            {
  61   4              TR1 = 0;
  62   4              AUXR &= ~0x01;    //S1 BRT Use Timer1;
  63   4              TMOD &= ~(1<<6);  //Timer1 set As Timer
  64   4              TMOD &= ~0x30;    //Timer1_16bitAutoReload;
  65   4              AUXR |=  (1<<6);  //Timer1 set as 1T mode
  66   4              TH1 = (u8)(j>>8);
  67   4              TL1 = (u8)j;
  68   4              ET1 = 0;  //禁止中断
  69   4              TMOD &= ~0x40;  //定时
  70   4              INT_CLKO &= ~0x02;  //不输出时钟
  71   4              TR1  = 1;
  72   4            }
  73   3            else if(COMx->UART_BRT_Use == BRT_Timer2)
  74   3            {
  75   4              AUXR &= ~(1<<4);  //Timer stop
  76   4              AUXR |= 0x01;   //S1 BRT Use Timer2;
  77   4              AUXR &= ~(1<<3);  //Timer2 set As Timer
  78   4              AUXR |=  (1<<2);  //Timer2 set as 1T mode
  79   4              TH2 = (u8)(j>>8);
  80   4              TL2 = (u8)j;
  81   4              IE2  &= ~(1<<2);  //禁止中断
  82   4              AUXR &= ~(1<<3);  //定时
  83   4              AUXR |=  (1<<4);  //Timer run enable
  84   4            }
  85   3            else return 2;  //错误
  86   3          }
  87   2          else if(COMx->UART_Mode == UART_ShiftRight)
  88   2          {
  89   3            if(COMx->BaudRateDouble == ENABLE)  AUXR |=  (1<<5);  //固定波特率SysClk/2
  90   3            else                AUXR &= ~(1<<5);  //固定波特率SysClk/12
  91   3          }
  92   2          else if(COMx->UART_Mode == UART_9bit) //固定波特率SysClk*2^SMOD/64
  93   2          {
  94   3            if(COMx->BaudRateDouble == ENABLE)  PCON |=  (1<<7);  //固定波特率SysClk/32
  95   3            else                PCON &= ~(1<<7);  //固定波特率SysClk/64
  96   3          }
  97   2          if(COMx->UART_Interrupt == ENABLE)  ES = 1; //允许中断
  98   2          else                ES = 0; //禁止中断
  99   2          if(COMx->UART_RxEnable == ENABLE) REN = 1;  //允许接收
 100   2          else                REN = 0;  //禁止接收
 101   2          P_SW1 = (P_SW1 & 0x3f) | (COMx->UART_P_SW & 0xc0);  //切换IO
 102   2          if(COMx->UART_RXD_TXD_Short == ENABLE)  PCON2 |=  (1<<4); //内部短路RXD与TXD, 做中继, ENABLE,DISABLE
 103   2          else                  PCON2 &= ~(1<<4);
 104   2          return  0;
 105   2        }
 106   1        return 3; //其它错误
 107   1      }
 108          
 109          
 110          /*************** 装载串口发送缓冲 *******************************/
 111          
 112          static void TX1_write2buff(u8 dat)  //写入发送缓冲，指针+1
 113          {
 114   1        TX1_Buffer[COM1.TX_write] = dat;  //装发送缓冲
 115   1        if(++COM1.TX_write >= COM_TX1_Lenth)  COM1.TX_write = 0;
 116   1      
C51 COMPILER V9.56.0.0   HW_SERIAL                                                         03/17/2019 14:30:51 PAGE 3   

 117   1        if(COM1.B_TX_busy == 0)   //空闲
 118   1        {  
 119   2          COM1.B_TX_busy = 1;   //标志忙
 120   2          TI = 1;         //触发发送中断
 121   2        }
 122   1      }
 123          
 124          #if 0
              static void TX2_write2buff(u8 dat)  //写入发送缓冲，指针+1
              {
                TX2_Buffer[COM2.TX_write] = dat;  //装发送缓冲
                if(++COM2.TX_write >= COM_TX2_Lenth)  COM2.TX_write = 0;
              
                if(COM2.B_TX_busy == 0)   //空闲
                {  
                  COM2.B_TX_busy = 1;   //标志忙
                  TI = 1;         //触发发送中断
                }
              }
              #endif
 137          
 138          
 139          void PrintString1(u8 *puts)
 140          {
 141   1          for (; *puts != 0;  puts++)  TX1_write2buff(*puts);   //遇到停止符0结束
 142   1      }
 143          
 144          char putchar (char c)   
 145          {        
 146   1          TX1_write2buff(c);    
 147   1          return c;
 148   1      }
 149          
 150          
 151          /********************* UART1中断函数************************/
 152          void UART1_int (void) interrupt UART1_VECTOR
 153          {
 154   1        if(RI)
 155   1        {
 156   2          RI = 0;
 157   2          if(COM1.B_RX_OK == 0)
 158   2          {
 159   3            if(COM1.RX_Cnt >= COM_RX1_Lenth)  COM1.RX_Cnt = 0;
 160   3            RX1_Buffer[COM1.RX_Cnt++] = SBUF;
 161   3            COM1.RX_TimeOut = TimeOutSet1;
 162   3          }
 163   2        }
 164   1      
 165   1        if(TI)
 166   1        {
 167   2          TI = 0;
 168   2          if(COM1.TX_read != COM1.TX_write)
 169   2          {
 170   3            SBUF = TX1_Buffer[COM1.TX_read];
 171   3            if(++COM1.TX_read >= COM_TX1_Lenth)   COM1.TX_read = 0;
 172   3          }
 173   2          else  COM1.B_TX_busy = 0;
 174   2        }
 175   1      }
 176          
 177          
 178          void  HW_serialConfig(UART_ID UARTx, u32 UART_BaudRate)
C51 COMPILER V9.56.0.0   HW_SERIAL                                                         03/17/2019 14:30:51 PAGE 4   

 179          {
 180   1        COMx_InitDefine   COMx_InitStructure;         //结构定义
 181   1        COMx_InitStructure.UART_Mode      = UART_8bit_BRTx;   //模式,       UART_ShiftRight,UART_8bit_BRTx,UART_9b
             -it,UART_9bit_BRTx
 182   1        COMx_InitStructure.UART_BRT_Use   = BRT_Timer2;     //使用波特率,   BRT_Timer1, BRT_Timer2 (注意: 串口2固定
             -使用BRT_Timer2)
 183   1        COMx_InitStructure.UART_BaudRate  = UART_BaudRate;      //波特率, 一般 110 ~ 115200
 184   1        COMx_InitStructure.UART_RxEnable  = ENABLE;       //接收允许,   ENABLE或DISABLE
 185   1        COMx_InitStructure.BaudRateDouble = DISABLE;      //波特率加倍, ENABLE或DISABLE
 186   1        COMx_InitStructure.UART_Interrupt = ENABLE;       //中断允许,   ENABLE或DISABLE
 187   1        COMx_InitStructure.UART_Polity    = PolityLow;      //中断优先级, PolityLow,PolityHigh
 188   1        
 189   1        if(USART1 == UARTx){
 190   2        
 191   2          COMx_InitStructure.UART_P_SW      = UART1_SW_P30_P31; //切换端口,   UART1_SW_P30_P31,UART1_SW_P36_P37,UA
             -RT1_SW_P16_P17(必须使用内部时钟)
 192   2        }else{
 193   2        
 194   2          COMx_InitStructure.UART_P_SW      = UART2_SW_P10_P11; //切换端口,   UART2_SW_P10_P11,UART2_SW_P46_P47
 195   2        }
 196   1        
 197   1        COMx_InitStructure.UART_RXD_TXD_Short = DISABLE;    //内部短路RXD与TXD, 做中继, ENABLE,DISABLE
 198   1        USART_Configuration(UARTx, &COMx_InitStructure);    //初始化串口1 USART1,USART2
 199   1      
 200   1        PrintString1("STC15F2K60S2 UART Test Prgramme ---- dbug2!\r\n");  //SUART1发送一个字符串
 201   1      }
 202          
 203          uint32 HW_serialRead(UART_ID UARTx, uint8 *wdata, uint32 wsize, uint32 timeout)
 204          {
 205   1        uint32 readx = 0;
 206   1        uint32 i = 0;
 207   1        
 208   1        while (timeout--)
 209   1        {
 210   2          delay_ms(1);
 211   2          if(USART1 == UARTx){
 212   3            
 213   3            if(COM1.RX_TimeOut > 0)   //超时计数
 214   3            {
 215   4              if(--COM1.RX_TimeOut == 0)
 216   4              {
 217   5                if(COM1.RX_Cnt > 0)
 218   5                {
 219   6                  for(i=0; i<COM1.RX_Cnt; i++){
 220   7                    
 221   7                    TX1_write2buff(RX1_Buffer[readx++]);  //收到的数据
 222   7                    if(readx >= wsize){
 223   8                    
 224   8                      COM1.RX_Cnt = COM1.RX_Cnt - i;
 225   8                      return readx;
 226   8                    }
 227   7                  }
 228   6                }
 229   5                COM1.RX_Cnt = 0;
 230   5              }
 231   4            }
 232   3          }
 233   2          else{
 234   3          
 235   3            //TX2_write2buff(wdata[i]);
 236   3          }
 237   2        }
C51 COMPILER V9.56.0.0   HW_SERIAL                                                         03/17/2019 14:30:51 PAGE 5   

 238   1        
 239   1        return 0;
 240   1      
 241   1      }
*** WARNING C280 IN LINE 203 OF driver\51\hw_serial.c: 'wdata': unreferenced local variable
 242          
 243          uint32 HW_serialWrite(UART_ID UARTx, uint8 *wdata, uint32 wsize)
 244          {
 245   1        uint32 i = 0;
 246   1        
 247   1        for(i=0; i<wsize; i++){
 248   2        
 249   2          if(USART1 == UARTx){
 250   3          
 251   3            TX1_write2buff(wdata[i]);
 252   3          }
 253   2          else{
 254   3          
 255   3            //TX2_write2buff(wdata[i]);
 256   3          }
 257   2          
 258   2        }
 259   1        
 260   1        return i;
 261   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    936    ----
   CONSTANT SIZE    =     46    ----
   XDATA SIZE       =     14      43
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =     80    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  1 WARNING(S),  0 ERROR(S)
