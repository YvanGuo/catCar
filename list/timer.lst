C51 COMPILER V9.56.0.0   TIMER                                                             03/17/2019 22:27:44 PAGE 1   


C51 COMPILER V9.56.0.0, COMPILATION OF MODULE TIMER
OBJECT MODULE PLACED IN .\list\timer.obj
COMPILER INVOKED BY: E:\keil_c51\C51\BIN\C51.EXE hal\timer.c LARGE OPTIMIZE(9,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\l
                    -ist\timer.lst) TABS(2) OBJECT(.\list\timer.obj)

line level    source

   1          
   2          /*------------------------------------------------------------------*/
   3          /* --- STC MCU International Limited -------------------------------*/
   4          /* --- STC 1T Series MCU RC Demo -----------------------------------*/
   5          /* --- Mobile: (86)13922805190 -------------------------------------*/
   6          /* --- Fax: 86-0513-55012956,55012947,55012969 ---------------------*/
   7          /* --- Tel: 86-0513-55012928,55012929,55012966 ---------------------*/
   8          /* --- Web: www.GXWMCU.com -----------------------------------------*/
   9          /* --- QQ:  800003751 ----------------------------------------------*/
  10          /* If you want to use the program or the program referenced in the  */
  11          /* article, please specify in which data and procedures from STC    */
  12          /*------------------------------------------------------------------*/
  13          
  14          /*************  功能说明  **************
  15          
  16          本文件为STC8xxx系列的端口初始化程序,用户几乎可以不修改这个程序.
  17          
  18          
  19          ******************************************/
  20          #include  "timer.h"
  21          #include  "driver/51/hw_timer.h"
  22          #include  "driver/51/hw_pwm.h"
  23          #include  "hal/pinCtl.h"
  24          
  25          static uint8 G_ServoEnable = 0;
  26          #define MAX_TIMER_CB_FUN (6)
  27          
  28          typedef enum{
  29          
  30            NOR = 0
  31            
  32          }TIMER_EVENT;
  33          
  34          typedef struct s_timerCbFunCfg{
  35            
  36            TIME_X timerx;
  37            uint32 timeCnt;
  38            uint32 timeoutExc;
  39            timerEvnCbFun_t timerxEvnCbFun;
  40            
  41          }s_timerCbFunCfg;
  42          
  43          typedef struct s_timerCbFunQue{
  44            
  45            uint8 head;
  46            uint8 tail;
  47            
  48          }s_timerCbFunQue;
  49          
  50          static s_timerCbFunQue G_timerCbFunQue = {0, 0};
  51          
  52          s_timerCbFunCfg G_timerEvnCbFuns[MAX_TIMER_CB_FUN] = {{0,1,NULL}, {0,1,NULL}, {0,1,NULL}, {0,1,NULL}, {0,1
             -,NULL}};
  53          
C51 COMPILER V9.56.0.0   TIMER                                                             03/17/2019 22:27:44 PAGE 2   

  54          int8 timerCbFunQueEmpty()
  55          {
  56   1        if((G_timerCbFunQue.head)%MAX_TIMER_CB_FUN == G_timerCbFunQue.tail){
  57   2        
  58   2           // queue empty
  59   2           return 1;
  60   2          
  61   2        }else{
  62   2          
  63   2           return 0;
  64   2        }
  65   1      }
  66          
  67          int8 timerCbFunQueFull()
  68          {
  69   1        if((G_timerCbFunQue.tail+1)%MAX_TIMER_CB_FUN == G_timerCbFunQue.head){
  70   2        
  71   2           // queue full
  72   2           return 1;
  73   2          
  74   2        }else{
  75   2          
  76   2           return 0;
  77   2        }
  78   1      }
  79          
  80          int8 timerCbFunExce(TIME_X timerx)
  81          {
  82   1        uint8 head = G_timerCbFunQue.head;
  83   1        timerEvnCbFun_t timerxEvnCbFun = NULL;
  84   1        
  85   1        
  86   1        if(timerCbFunQueEmpty()){
  87   2        
  88   2           // queue full
  89   2           return -1;
  90   2          
  91   2        }
  92   1        
  93   1        while((head)%MAX_TIMER_CB_FUN != G_timerCbFunQue.tail){
  94   2        
  95   2            if(timerx == G_timerEvnCbFuns[head].timerx){
  96   3      
  97   3              G_timerEvnCbFuns[head].timeCnt++;
  98   3              if(G_timerEvnCbFuns[head].timeCnt >= G_timerEvnCbFuns[G_timerCbFunQue.tail].timeoutExc){
  99   4              
 100   4                  timerxEvnCbFun = G_timerEvnCbFuns[head].timerxEvnCbFun;
 101   4                  if(NULL != timerxEvnCbFun){
 102   5                    
 103   5                      
 104   5                      timerxEvnCbFun(timerx);
 105   5                  }
 106   4                  
 107   4                  G_timerEvnCbFuns[head].timeCnt = 0;
 108   4              }
 109   3              
 110   3            }
 111   2            
 112   2            head++;
 113   2          
 114   2        }
 115   1        
C51 COMPILER V9.56.0.0   TIMER                                                             03/17/2019 22:27:44 PAGE 3   

 116   1        return 0;
 117   1      }
 118          
 119          int8 registTimerCbFun(TIME_X timerx, uint32 timeoutExc, timerEvnCbFun_t cb)
 120          {
 121   1        int8 queID = 0;
 122   1        if(timerCbFunQueFull()){
 123   2        
 124   2           // queue full
 125   2           //return -1;
 126   2           
 127   2        }
 128   1        
 129   1        queID = G_timerCbFunQue.tail;
 130   1        G_timerEvnCbFuns[G_timerCbFunQue.tail].timerx = timerx;
 131   1        G_timerEvnCbFuns[G_timerCbFunQue.tail].timeoutExc = timeoutExc;
 132   1        G_timerEvnCbFuns[G_timerCbFunQue.tail].timeCnt = 0;
 133   1        G_timerEvnCbFuns[G_timerCbFunQue.tail].timerxEvnCbFun = cb;
 134   1        G_timerCbFunQue.tail = (G_timerCbFunQue.tail+1)%MAX_TIMER_CB_FUN;
 135   1        
 136   1        return queID;
 137   1      }
 138          
 139          int8 unregistTimerCbFun(int8 cb_FunID)
 140          {
 141   1      
 142   1        if(timerCbFunQueEmpty()){
 143   2        
 144   2           // queue empty
 145   2           return -1;
 146   2        }
 147   1        
 148   1        G_timerEvnCbFuns[cb_FunID].timerx = 0;
 149   1        G_timerEvnCbFuns[cb_FunID].timerxEvnCbFun = NULL;
 150   1        G_timerCbFunQue.head = (G_timerCbFunQue.head+1)%MAX_TIMER_CB_FUN;
 151   1        return 0;
 152   1      }
 153          
 154          uint8 timerRegist(TIME_X timerx, uint32 timeoutExc, timerEvnCbFun_t cb)
 155          {
 156   1        
 157   1        HW_Timer_config(timerx, 1);
 158   1        registTimerCbFun(timerx, timeoutExc, cb);
 159   1        return 0;
 160   1      }
 161          
 162          void timerxStart(TIME_X timerx)
 163          {
 164   1        if(TIMER_0 == timerx){
 165   2        
 166   2          HW_Time0Reload();
 167   2          HW_Time0Start();
 168   2        }
 169   1        else if(TIMER_1 == timerx)
 170   1        {
 171   2          HW_Time1Reload();
 172   2          HW_Time1Start();
 173   2        }
 174   1        
 175   1      }
 176          
 177          void timerxReload(TIME_X timerx)
C51 COMPILER V9.56.0.0   TIMER                                                             03/17/2019 22:27:44 PAGE 4   

 178          {
 179   1        if(TIMER_0 == timerx){
 180   2        
 181   2          HW_Time0Reload();
 182   2          
 183   2        }
 184   1        else if(TIMER_1 == timerx)
 185   1        {
 186   2          HW_Time1Reload();
 187   2        
 188   2        }
 189   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    531    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     51      17
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
