C51 COMPILER V9.56.0.0   SERVOCOMMON                                                       03/17/2019 22:26:02 PAGE 1   


C51 COMPILER V9.56.0.0, COMPILATION OF MODULE SERVOCOMMON
OBJECT MODULE PLACED IN .\list\servoCommon.obj
COMPILER INVOKED BY: E:\keil_c51\C51\BIN\C51.EXE hal\servoCommon.c LARGE OPTIMIZE(9,SPEED) BROWSE DEBUG OBJECTEXTEND PRI
                    -NT(.\list\servoCommon.lst) TABS(2) OBJECT(.\list\servoCommon.obj)

line level    source

   1          
   2          #include "servoCommon.h"
   3          #include "pinCtl.h"
   4          #include "driver/51/hw_pwm.h"
   5          #include "timer.h"
   6          #include <stdio.h>
   7          
   8          typedef struct s_ServoCfg{
   9              uint8 pin;
  10              uint16 minPW;
  11              uint16 maxPW;
  12              int16 minAngle;
  13              int16 maxAngle;
  14          }s_ServoCfg;
  15          
  16          static s_ServoCfg G_ServoCfg = {-1, -1, -1, -1, -1};
  17          
  18          static void resetFields(void)
  19          {
  20   1        setServoPulseWidth(15);
  21   1        
  22   1      }
  23          
  24          uint16 servoReadMicroseconds()
  25          {
  26   1        
  27   1        return 0;
  28   1      }
  29          
  30          void servoWriteMicroseconds(uint16 pulseWidth)
  31          {
  32   1        
  33   1        setServoPulseWidth(pulseWidth);
  34   1        
  35   1      }
  36          
  37          int32 servoRead()
  38          {
  39   1        
  40   1        return 0;
  41   1      }
  42          
  43          
  44          void servoWrite(int32 angle)
  45          {
  46   1        uint16 pulseWidth = 5;
  47   1        
  48   1        if(angle < 0 || angle > 180){
  49   2        
  50   2          return;
  51   2        }
  52   1        
  53   1        pulseWidth = 5+angle/9;
  54   1        
C51 COMPILER V9.56.0.0   SERVOCOMMON                                                       03/17/2019 22:26:02 PAGE 2   

  55   1        setServoPulseWidth(pulseWidth);
  56   1      }
  57          
  58          int8 servoDetach()
  59          {
  60   1        pinMode_common(G_ServoCfg.pin, OUTPUT);
  61   1        G_ServoCfg.pin = NOT_ATTACHED;
  62   1        return 0;
  63   1      }
  64          
  65          int32 servoAttachedPin()
  66          { 
  67   1        return G_ServoCfg.pin; 
  68   1        
  69   1      }
  70          
  71          int16 servoAttached()
  72          { 
  73   1        return G_ServoCfg.pin != NOT_ATTACHED; 
  74   1      }
  75          
  76          void testTimerCb(TIME_X timerx)
  77          {
  78   1      
  79   1        static u32 timeCnt = 0;
  80   1        timeCnt++;
  81   1        if(timeCnt > 1000){
  82   2        
  83   2          digitalWrite_common(LED_CTL_PIN, LOW);
  84   2          printf("LED on\r\n");
  85   2        }else{
  86   2        
  87   2          digitalWrite_common(LED_CTL_PIN, HIGH);
  88   2          printf("LED off\r\n");
  89   2        }
  90   1        
  91   1        if(timeCnt > 2000){
  92   2        
  93   2          timeCnt = 0;
  94   2        }
  95   1        
  96   1        
  97   1      }
*** WARNING C280 IN LINE 76 OF hal\servoCommon.c: 'timerx': unreferenced local variable
  98          
  99          
 100          int8 servoAttach(uint8 pin, uint16 minPulseWidth, uint16 maxPulseWidth, int16 minAngle, int16 maxAngle)
 101          {
 102   1        if(servoAttached()){
 103   2        
 104   2          //return 0;
 105   2        }
 106   1        
 107   1        G_ServoCfg.pin = pin;
 108   1        G_ServoCfg.minPW = minPulseWidth;
 109   1        G_ServoCfg.maxPW = maxPulseWidth;
 110   1        G_ServoCfg.minAngle = minAngle;
 111   1        G_ServoCfg.maxAngle = maxAngle;
 112   1        pinMode_common(pin, PWM);
 113   1        setServoCtlPin(G_ServoCfg.pin);
 114   1        timerRegist(TIMER_0, 1, ServoPwmInterruptProc);
 115   1        return 0;
C51 COMPILER V9.56.0.0   SERVOCOMMON                                                       03/17/2019 22:26:02 PAGE 3   

 116   1      }
 117          
 118          
 119          
 120          void ServoDefaultInit()
 121          {
 122   1        if(servoAttached()){
 123   2        
 124   2          //return;
 125   2        }
 126   1        
 127   1        G_ServoCfg.pin = SERVO_CTL_PIN;
 128   1        G_ServoCfg.minPW = SERVO_DEFAULT_MIN_PW;
 129   1        G_ServoCfg.maxPW = SERVO_DEFAULT_MAX_PW;
 130   1        G_ServoCfg.minAngle = SERVO_DEFAULT_MIN_ANGLE;
 131   1        G_ServoCfg.maxAngle = SERVO_DEFAULT_MAX_ANGLE;
 132   1        pinMode_common(G_ServoCfg.pin, PWM);
 133   1        setServoCtlPin(G_ServoCfg.pin);
 134   1        timerRegist(TIMER_0, 1, ServoPwmInterruptProc);
 135   1        //timerRegist(TIMER_0, 1, testTimerCb);
 136   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    379    ----
   CONSTANT SIZE    =     19    ----
   XDATA SIZE       =     13      10
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  1 WARNING(S),  0 ERROR(S)
